1. main.py: Train and save a RandomForestClassifier on the titanic.csv file to predict whether a passenger on the Titanic ship would have survived. Features considered for the Binary Classification included: sex, passenger class and fare.
2. load_model.py: Enter the sex, passenger class and fare of a new passenger and load the saved model to predict whether he/she will survive or not.
3. fast_api.py: Instead of using load_model.py to get input from the terminal, use FastAPI to locally host a website that asks for input parameters and then makes a model prediction. 
4. Dockerfile: Define the environment variables, specify the working directory, copy the necessary files and write the python command for building an image that runs the load_model.py file.
5. Build Image: Build the image with docker build -t titanic_model:1.0 . from the titanic_prediction directory
6. Run Container: Run the container with docker run -d -p 8000:8000 titanic_model:1.0 from the titanic_prediction directory. The website UI can be accessed from the localhost:8000/docs. Upon entering the inputs (maintain the range for each input parameters), a prediction is returned as an output.
7. Push Image to Docker Hub: Push the image to Docker Hub by first reating a repository in Docker Hub. Then give a tag name to the created image using docker tag titanic_model:1.0 user_name/repository_name:latest and push it to the Docker registery using docker push user_name/repository_name:latest. 
8. Deploy on AWS ECS: Deploy and run the registered model image on AWS ECS by configuring a docker container where the image url should be defined as docker.io/user_name/repository_name:latest. Once created, the container status changes to running and the model can be accessed via the public IP address to get predictions. 

Images: 
S1.PNG and S2.PNG show the FastAPI website UI taking 3 inputs and outputing the model prediction.

Ideas taken from the following articles: 
https://www.analyticsvidhya.com/blog/2022/05/a-complete-guide-for-deploying-ml-models-in-docker/
https://www.analyticsvidhya.com/blog/2022/09/fast-api-docker-and-aws-ecs-to-deploy-machine-learning-model/
